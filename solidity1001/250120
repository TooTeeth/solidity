// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

/*a의 b승을 반환하는 함수를 구현하세요.*/
contract Q71{
    function pow(uint a, uint b) public pure returns(uint) {
        return a**b;
    }
}

/*2개의 숫자를 더하는 함수, 곱하는 함수 a의 b승을 반환하는 함수를 구현하는데 3개의 함수 모두 2개의 input값이 10을 넘지 않아야 하는 조건을 최대한 효율적으로 구현하세요.*/
contract Q72{
    function add(uint _a, uint _b) public pure returns(uint){
    require(_a <= 10 && _b <= 10);
    return _a + _b;
}

    function mul(uint _a, uint _b) public pure returns(uint){
     require(_a <= 10 && _b <= 10);
    return _a * _b;
}

    function pow(uint _a, uint _b) public pure returns(uint){
    require(_a <= 10 && _b <= 10);
    return _a ** _b;
}
}

/*2개 숫자의 차를 나타내는 함수를 구현하세요.*/
contract Q73{
    function sub(uint _a, uint _b) public pure returns(uint){
        return _a - _b;
    }
}

/*지갑 주소를 넣으면 5개의 4bytes로 분할하여 반환해주는 함수를 구현하세요.*/

contract Q74 {
    function Addr(address _addr) public pure returns (bytes4, bytes4, bytes4, bytes4, bytes4) {
        uint addrInt = uint(uint160(_addr)); //uint256로 형태로 - address uint 형태로 처리하기 때문?
      
        bytes4 part1 = bytes4(uint32(addrInt));
        bytes4 part2 = bytes4(uint32(addrInt >> 32));
        bytes4 part3 = bytes4(uint32(addrInt >> 64)); //>> 비트 쉬프트인데 설명이 뭔지 모르겠다.
        bytes4 part4 = bytes4(uint32(addrInt >> 96));
        bytes4 part5 = bytes4(uint32(addrInt >> 128));

        return (part5, part4, part3, part2, part1);
    }
}//gpt 사용

/*1. 숫자 3개를 입력하면 그 제곱을 반환하는 함수를 구현하세요. 그 3개 중에서 가운데 출력값만 반환하는 함수를 구현하세요.
예) func A : input → 1,2,3 // output → 1,4,9 | func B : output 4 (1,4,9중 가운데 숫자)*/
contract Q75{
    function pow(uint _a, uint _b, uint _c) public pure returns(uint, uint, uint){
         return(_a**2, _b**2, _c**2);
    }
    function mid(uint _a, uint _b, uint _c) public pure returns(uint){
        (uint A, uint B, uint C) = pow(_a, _b, _c);
        return(B);
}
}

/*특정 숫자를 입력했을 때 자릿수를 알려주는 함수를 구현하세요. 추가로 그 숫자를 5진수로 표현했을 때는 몇자리 숫자가 될 지 알려주는 함수도 구현하세요.*/
contract Q76{
    function digit(uint _n) public pure returns(uint){
        uint count = 0;
        if(_n == 0){
            return 0;
        }
        while(_n > 0){
            _n = _n / 10;
            count ++;
        }
        return count;
    }

    function digitFive(uint _n) public pure returns(uint){
        uint count = 0;
        if(_n == 0){
            return 0;
        }
        while(_n > 0){
            _n = _n / 5;
            count ++;
        }
        return count;
    }
}//gpt 사용

/*자신의 현재 잔고를 반환하는 함수를 보유한 Contract A와 다른 주소로 돈을 보낼 수 있는 Contract B를 구현하세요.
    B의 함수를 이용하여 A에게 전송하고 A의 잔고 변화를 확인하세요.*/
 contract ContractA{
    uint public balance;

    constructor(uint initialBalance){
        balance = initialBalance;
    }
    function getBalance() public view returns(uint){
        return balance;
    }
    function addBalance(uint amount) public{
        balance += amount;
    }
 }

 interface IcontractA {
    function addBalance(uint amount) external;
    
 }
  
contract ContarctB{
    address public contractAAddress;

    constructor(address _contractAAdress){
        contractAAddress = _contractAAdress;
    }
    function send(uint amount) public payable{
        require(msg.value <= amount, "no");
        IcontractA(contractAAddress).addBalance(amount);
}
}//gpt 사용 - 값이 이상하게 나온다


/*계승(팩토리얼)을 구하는 함수를 구현하세요. 계승은 그 숫자와 같거나 작은 모든 수들을 곱한 값이다. 
    예) 5 → 1*2*3*4*5 = 120, 11 → 1*2*3*4*5*6*7*8*9*10*11 = 39916800
    while을 사용해보세요*/
contract Q78{
    function factorial(uint _n) public pure returns(uint){
       uint res = 1;
       uint i = 1;

       while(i <= _n){
        res *= i;
        i++;
       }
       return res;
}
}

/*숫자 1,2,3을 넣으면 1 and 2 or 3 라고 반환해주는 함수를 구현하세요.
    힌트 : 7번 문제(시,분,초로 변환하기)*/ 

    import "@openzeppelin/contracts/utils/Strings.sol";

contract Q79{
    function CovertToString(uint _a, uint _b, uint _c) public pure returns(string memory result){
        string memory A = unicode" and ";
        string memory O = unicode" or ";
        string memory S = unicode" ";

        string memory a = _a == 0 ? "" : string.concat(Strings.toString(_a), A);
        string memory b = _b == 0 ? "" : string.concat(Strings.toString(_b), O);
        string memory c = _c == 0 ? "" : string.concat(Strings.toString(_c), S);

       result = string.concat(a, b, c);

    }
}

/*번호와 이름 그리고 bytes로 구성된 고객이라는 구조체를 만드세요.
 bytes는 번호와 이름을 keccak 함수의 input 값으로 넣어 나온 output값입니다. 고객의 정보를 넣고 변화시키는 함수를 구현하세요. */
contract Q80{
    struct customer{
        uint number;
        string name;
        bytes put;
    }
    
    customer[] customers;

    function Con(customer memory _c) public view returns(bytes32 res){
       res = keccak256(abi.encodePacked(_c.number, _c.name, _c.put));
    }
}
