// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

/*3의 배수만 들어갈 수 있는 array를 구현하세요.*/
contract Q21{
    uint[] Three;
    function three(uint _a) public {
        if(_a % 3 == 0){
            Three.push(_a);
        }
    }

    function getThree() public view returns(uint[] memory){
        return Three;
    }
}

/*2. 뺄셈 함수를 구현하세요. 임의의 두 숫자를 넣으면 자동으로 둘 중 큰수로부터 작은 수를 빼는 함수를 구현하세요.
    예) 2,5 input → 5-2=3(output)*/

contract Q22{
    function sub(int _a, int _b) public pure returns(int){
        if(_a - _b > 0){
            return _a - _b;
        }else{
            return _b - _a;
        }
    }

}

/*5의 배수라면 “A”를, 나머지가 1이면 “B”를, 나머지가 2면 “C”를, 나머지가 3이면 “D”, 나미저가 4면 “E”를 반환하는 함수를 구현하세요.*/
contract Q23{
    function convert(uint _a) public pure returns(string memory){
        if(_a % 5 == 0){
            return "A";
        }else if(_a % 5 == 1){
            return "B";
        }else if(_a % 5 == 2){
            return "C";
        }else if(_a % 5 == 3){
            return "D";
        }else if(_a % 5 == 4){
            return "E";
        }else{
            return "Other";
        }
    }
}

/*string을 input으로 받는 함수를 구현하세요. “Alice”가 들어왔을 때에만 true를 반환하세요.*/
contract Q24{
    function Bool(string memory _name) public pure returns(bool){
        if(keccak256(abi.encodePacked(_name)) == keccak256(abi.encodePacked("Alice"))){
            return true;
        }else{
            return false;
        }
    }
    
}//오늘도 string 그대로 넣어서 해맸다. string keccak256으로 변환하는 거 잊지말기.




/*배열 A를 선언하고 해당 배열에 n부터 0까지 자동으로 넣는 함수를 구현하세요. */



contract Q25{
    uint[] A;

    function roof(uint _n) public pure returns(uint[] memory){
        uint[] memory AB = new uint[](_n+1);
        for(uint i = 0; i <_n+1; i++){
            AB[i] = _n - i;
        }
        return AB;
    }
        
}//복습해보기





/*홀수만 들어가는 array, 짝수만 들어가는 array를 구현하고 숫자를 넣었을 때 자동으로 홀,짝을 나누어 입력시키는 함수를 구현하세요.*/
contract Q26{
    uint[] odd;
    uint[] even;

    function oddOrEven(uint _a) public{
        if(_a % 2 == 0){
            even.push(_a);
        }else{
            odd.push(_a);
        }
        }
     
    function getArray() public view returns(uint[] memory, uint[] memory){
    return (odd, even);
    }
}


/*string 과 bytes32를 key-value 쌍으로 묶어주는 mapping을 구현하세요. 해당 mapping에 정보를 넣고, 지우고 불러오는 함수도 같이 구현하세요.*/
contract Q27{
    mapping (string => bytes32) A;
    
    function add(string memory _key, bytes32 _value) public {
        A[_key] = _value;
    } 

    function getA(string memory _key) public view returns(bytes32){
        return A[_key];
    }

    function DeleteA(string memory _key) public{
        delete A[_key];
    }

}//dfasd,0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef


/*ID와 PW를 넣으면 해시함수(keccak256)에 둘을 같이 해시값을 반환해주는 함수를 구현하세요*/

contract Q28{
    function convert(string memory _ID, string memory _pw) public pure returns(bytes32){
        return keccak256(abi.encodePacked(_ID, _pw));
    }
}

/*숫자형 변수 a와 문자형 변수 b를 각각 10 그리고 “A”의 값으로 배포 직후 설정하는 contract를 구현하세요.*/
contract Q29{
    uint a =10;
    uint b = 10;
    constructor(uint _A){
         a = _A;
         b = _A;
    }
    
}

/*10. 임의대로 숫자를 넣으면 알아서 내림차순으로 정렬해주는 함수를 구현하세요
(sorting 코드 응용 → 약간 까다로움) 
예 : [2,6,7,4,5,1,9] → [9,7,6,5,4,2,1]*/

contract Q30{
    uint[] A;
    function sorting(uint _a) public {
         uint[] memory _A = A;
        for(uint i = 0; i < A.length-1; i++){
            for(uint j=i+1; j < A.length; j++){
                if(_A[i] < _A[j]){
                    (_A[i], _A[j]) = (_A[j], _A[i]);
                }
            }
        }
        return _A;
    }

}//모르겠다

