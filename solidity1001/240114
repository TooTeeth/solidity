// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

/*숫자만 들어갈 수 있으며 길이가 4인 배열을 (상태변수로)선언하고 그 배열에 숫자를 넣는 함수를 구현하세요. 배열을 초기화하는 함수도 구현하세요. 
(길이가 4가 되면 자동으로 초기화하는 기능은 굳이 구현하지 않아도 됩니다.)*/
contract Q41{
    uint[4] numbers;

    function setNumbers(uint a, uint b) public {
        numbers[a-1] = b;
    }

    function deletNumber() public {
        delete numbers;
    }

    function deletNumbers(uint index) public{
        delete numbers[index-1];
    }

    function getNumbers() public view returns(uint[4] memory){
        return numbers;
    }//uint[4] 까먹지 말기
}

/*이름과 번호 그리고 지갑주소를 가진 '고객'이라는 구조체를 선언하세요. 새로운 고객 정보를 만들 수 있는 함수도 구현하되 이름의 글자가 최소 5글자가 되게 설정하세요.*/
contract Q42{
    struct customer{
        uint number;
        string name;
        address addr;
    }

    customer[] public customers; //public으로 선언하면  getcustomer 필요없음

    function setCustomers(uint _number, string memory _name, address _addr) public {
        require(bytes(_name).length > 4);
        customers.push(customer({
            number : _number,
            name : _name,
            addr : _addr
        }));
    }  //customers.push(customer({}));
}

/*3은행의 역할을 하는 contract를 만드려고 합니다. 별도의 고객 등록 과정은 없습니다. 
해당 contract에 ether를 예치할 수 있는 기능을 만드세요. 
또한, 자신이 현재 얼마를 예치했는지도 볼 수 있는 함수 그리고 자신이 예치한만큼의 ether를 인출할 수 있는 기능을 구현하세요.
힌트 : mapping을 꼭 이용하세요.*/
contract Q43{
    mapping(address => uint) balances;

    function deposit() public payable{
        require(msg.value > 0);
        balances[msg.sender] += msg.value;
    }

    function Balance() public view returns(uint){
        return balances[msg.sender];
    }

    function withdraw() public payable{
       uint amount = balances[msg.sender];
       require(amount > 0);
       balances[msg.sender] = 0;
       payable(msg.sender).transfer(amount);
       
    }
    
}

/*string만 들어가는 array를 만들되, 4글자 이상인 문자열만 들어갈 수 있게 구현하세요.*/
contract Q44{
    string[] arr;
    function PUSH(string memory _m) public {
        require(bytes(_m).length > 3);
        arr.push(_m);
    }
    function getArr() public view returns(string[] memory){
        return arr;
    }
}

/*숫자만 들어가는 array를 만들되, 100이하의 숫자만 들어갈 수 있게 구현하세요.*/
contract Q45{
    uint[] numbers;

    function PUSH(uint index) public{
        require(index < 101);
        numbers.push(index);
    }

    function getNumbers() public view returns(uint[] memory){
        return numbers;
    }
}

/*3의 배수이거나 10의 배수이면서 50보다 작은 수만 들어갈 수 있는 array를 구현하세요.
예 : 15 -> 가능, 3의 배수 // 40 -> 가능, 10의 배수이면서 50보다 작음 // 66 -> 불가능, 3의 배수 // 70 -> 불가능 10의 배수이지만 50보다 큼)*/
contract Q46{
    uint[] numbers;
    function PUSH(uint index) public {
        require(index % 3 == 0 || index % 10 == 0);
        require(index < 50);
        numbers.push(index);
    }

    function getNumbers() public view returns(uint[] memory){
        return numbers;
    }
}

/*배포와 함께 배포자가 owner로 설정되게 하세요. owner를 바꿀 수 있는 함수도 구현하되 그 함수는 owner만 실행할 수 있게 해주세요.*/
contract Q47{
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function changeOwner(address wallet) public{
        require(msg.sender == owner);
        owner = wallet;
    }
}


/*A라는 contract에는 2개의 숫자를 더해주는 함수를 구현하세요. B라고 하는 contract를 따로 만든 후에 A의 더하기 함수를 사용하는 코드를 구현하세요.*/
contract Q48_A{

  function add(uint a, uint b) public pure returns(uint){
    return a + b;
  }
}

contract Q48_B{
    Q48_A public aContract;

    constructor(address _Aaddress) {
        aContract = Q48_A(_Aaddress);
    
    }

    function add(uint c, uint d) public view returns(uint){
        return aContract.add(c, d);
    }
}//gpt사용
   
contract  Q48_C{
 Q48_B public bContract;

 constructor(address _bAddress){
    bContract = Q48_B(_bAddress);
 }

 function add(uint e, uint f) public view returns(uint){
    return bContract.add(e, f);
 }
}

/*긴 숫자를 넣었을 때, 마지막 3개의 숫자만 반환하는 함수를 구현하세요.
 예) 459273 → 273 // 492871 → 871 // 92218 → 218*/
 contract Q49{
    function three(uint index) public pure returns(uint){
        return (index % 1000);
    }
 }

/*숫자 3개가 부여되면 그 3개의 숫자를 이어붙여서 반환하는 함수를 구현하세요. 
예) 3,1,6 → 316 // 1,9,3 → 193 // 0,1,5 → 15 
응용 문제 : 3개 아닌 n개의 숫자 이어붙이기*/ 
contract Q50{
   
}

