// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;
/*숫자들이 들어가는 배열을 선언하고 그 중에서 3번째로 큰 수를 반환하세요.*/
contract Q51{
    uint[] a;
  
}

/*자동으로 아이디를 만들어주는 함수를 구현하세요. 이름, 생일, 지갑주소를 기반으로 만든 해시값의 첫 10바이트를 추출하여 아이디로 만드시오.*/
contract Q52{
    function id(string memory _name, uint _birthday, address _wallet) public pure returns(bytes10 ID){
     ID  =  bytes10(keccak256(abi.encode(_name, _birthday, _wallet)));
    }
}

/*시중에는 A,B,C,D,E 5개의 은행이 있습니다. 각 은행에 고객들은 마음대로 입금하고 인출할 수 있습니다. 각 은행에 예치된 금액 확인, 입금과 인출할 수 있는 기능을 구현하세요.
힌트 : 이중 mapping을 꼭 이용하세요.*/
contract Q53 {
    enum Bank{A, B, C, D, E}
    mapping(Bank => mapping(address => uint)) balance;

    function withdraw(Bank _bank, uint amount) public payable{
        require(balance[_bank][msg.sender] >= amount, "Invalid Amount");
        balance[_bank][msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        
    }

}


/*기부받는 플랫폼을 만드세요. 가장 많이 기부하는 사람을 나타내는 변수와 그 변수를 지속적으로 바꿔주는 함수를 만드세요.
    힌트 : 굳이 mapping을 만들 필요는 없습니다.*/
contract Q54{
   address[] public donor;
   uint[] public donations;
   address public bestdonor;
   uint public bestdonation;

   function donate() public payable{
    donor.push(msg.sender);
    donations.push(msg.value);

    if(msg.value > bestdonation){
    bestdonation = msg.value;
    bestdonor = msg.sender;
   }
   }

   function vip() public view returns(address, uint){
   return(bestdonor, bestdonation);
   }
}


/*배포와 함께 owner를 설정하고 owner를 다른 주소로 바꾸는 것은 오직 owner 스스로만 할 수 있게 하십시오.*/
contract Q55{
    address payable public  owner;
    constructor() {
        owner = payable(msg.sender);
    }
    
    function changeAddr(address payable _wallet) public payable {
        require(msg.sender == owner, "No");
        owner = _wallet;
    }
}
/*위 문제의 확장버전입니다. owner와 sub_owner를 설정하고 owner를 바꾸기 위해서는 둘의 동의가 모두 필요하게 구현하세요.*/
contract Q56{
    address payable public owner;
    address payable public sub_owner;

    constructor() {
        owner = payable(msg.sender);
        sub_owner = payable(msg.sender);
    }
    function changeAddr(address payable _wallet) public payable {
        require(msg.sender == owner && msg.sender == sub_owner, "no");
        owner = _wallet;
    }
}

/*위 문제의 또다른 버전입니다. owner가 변경할 때는 바로 변경가능하게 sub-owner가 변경하려고 한다면 owner의 동의가 필요하게 구현하세요.*/
contract Q57{
    address payable public owner;
    address payable public sub_owner;
    
    constructor() {
        owner = payable(msg.sender);
    }
    function changeOwner(address payable _wallet) public payable {
        owner = _wallet;
    }
    function changeSubowner(address payable _wallet) public payable{
        require(msg.sender == owner, "no");
        sub_owner = _wallet;
    }
}

/*contract에 a,b,c라는 상태변수가 있습니다. a는 A 외부에서는 변화할 수 없게 하고 싶습니다.
 b는 상속받은 contract들만 변경시킬 수 있습니다. c는 제한이 없습니다. 각 변수들의 visibility를 설정하세요.*/
 contract Q58{
    uint private  a;
    uint internal b;
    uint c;
    
 }

/*현재시간을 받고 2일 후의 시간을 설정하는 함수를 같이 구현하세요.*/
contract Q59{

    function getTwoDaysLater() public view returns (uint256) {
        uint256 currentTime = block.timestamp;
        uint256 twoDaysLater = currentTime + 2 days;
        return twoDaysLater;
    }
}

/*방이 2개 밖에 없는 펜션을 여러분이 운영합니다. 각 방마다 한번에 3명 이상 투숙객이 있을 수는 없습니다. 
특정 날짜에 특정 방에 누가 투숙했는지 알려주는 자료구조와 그 자료구조로부터 값을 얻어오는 함수를 구현하세요.
예약시스템은 운영하지 않아도 됩니다. 과거의 일만 기록한다고 생각하세요.
힌트 : 날짜는 그냥 숫자로 기입하세요. 예) 2023년 5월 27일 → 230527*/
contract Q60{
    struct ROOM{
        uint date;
        uint[2] room;
        uint[2] roomMember;
    }
    ROOM[] rooms;

    function addGuest(uint _date,uint[2] memory _room, uint[2] memory _roomMembers) public {
        ROOM memory newRoom = ROOM({
            date: _date,
            room: _room,
            roomMember: _roomMembers
        });
        rooms.push(newRoom);
    }

    function getResevation(uint _date) public view returns(uint, uint[2] memory, uint[2] memory){
        ROOM storage room = rooms[_date]; //이게 맞나?
        return(room.date, room.room, room.roomMember);
    }

}







-0------------복습----------// SPDX-License-Identifier: GPL-3.0


/*숫자들이 들어가는 배열을 선언하고 그 중에서 3번째로 큰 수를 반환하세요.*/
contract Q51{
    uint[] public _numbers;

    function PUSH(uint index) public {
        _numbers.push(index);
    }

    function getThree() public view returns(uint){
      uint[] memory numbers = _numbers;
      for(uint i = 0; i < numbers.length-1; i++){
        for(uint j = i + 1; j < numbers.length; j++){
            if(numbers[i] < numbers[j]){
                (numbers[i], numbers[j]) = (numbers[j], numbers[i]);
            }
        }
      }
    return numbers[2];
    }   
}

/*자동으로 아이디를 만들어주는 함수를 구현하세요.
 이름, 생일, 지갑주소를 기반으로 만든 해시값의 첫 10바이트를 추출하여 아이디로 만드시오.*/
contract Q52{
    function getID(string memory name, uint birthday, address wallet) public pure returns(bytes10){
        return bytes10(keccak256(abi.encodePacked(name, birthday, wallet)));
    }
}

/*시중에는 A,B,C,D,E 5개의 은행이 있습니다. 각 은행에 고객들은 마음대로 입금하고 인출할 수 있습니다. 각 은행에 예치된 금액 확인, 입금과 인출할 수 있는 기능을 구현하세요.
힌트 : 이중 mapping을 꼭 이용하세요.*/
contract Q53 {
    mapping(string => mapping(address => uint)) bankbalance;
    
    function setBank(string memory bankName) public payable{
        require(msg.value > 0);
        bankbalance[bankName][msg.sender] += msg.value;

    }
    function withdraw(string memory bankName, uint amount) public payable{
        uint balance = bankbalance[bankName][msg.sender];
        require(balance > amount);
        bankbalance[bankName][msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    function getBalance(string memory bankName) public view returns(uint){
        return bankbalance[bankName][msg.sender];
    }
    
}

/*기부받는 플랫폼을 만드세요. 가장 많이 기부하는 사람을 나타내는 변수와 그 변수를 지속적으로 바꿔주는 함수를 만드세요.
 힌트 : 굳이 mapping을 만들 필요는 없습니다.*/
 contract Q54{
   address top;
   uint topbalance;

   function donate() public payable{
    require(msg.value > 0); // 현재 호출된 함수에 전달된 Ether의 양
    if(msg.value > topbalance){
        top = msg.sender; //현재 트랜잭션을 호출한 주소 -  기부자의 주소 저장
        topbalance = msg.value; //기부자의 금액 저장
    }
   }

   function getTop() public view returns(address, uint){
    return(top, topbalance);
   }

   function getBalance() public view returns(uint){
    return address(this).balance;
   }
    
 }

 /*배포와 함께 owner를 설정하고 owner를 다른 주소로 바꾸는 것은 오직 owner 스스로만 할 수 있게 하십시오.*/
 contract Q55{
    address owner;
    constructor() {
       owner = msg.sender;
    }

    function changeAddr(address addr) public{
        require(msg.sender == owner);
        owner = addr;
    }
    
    function getOwner() public view returns(address){
        return owner;
    }
 }

 /*위 문제의 확장버전입니다. owner와 sub_owner를 설정하고 owner를 바꾸기 위해서는 둘의 동의가 모두 필요하게 구현하세요.*/
 contract Q56{
    address public owner;
    address sub_owner;
    bool ownerAprove = false;
    bool subOwnerAprove = false;
    
    constructor(address _sub_owner) {
        owner = msg.sender;
        sub_owner = _sub_owner;
        
    }

    function ownerVote() public{
        require(msg.sender == owner);
        ownerAprove = true;
    }
     function subOwnerVote() public{
        require(msg.sender == sub_owner); //_sub_owner는 단순변수이기 떄문에 불가능. msg.sender는 호출 주소를 알려주는 것이기 때문에 constructor로 설정해줘도 가능.
        subOwnerAprove = true;
    }

    function ChangeOwner(address newOwner) public {
        require(ownerAprove == true && subOwnerAprove == true);
        owner = newOwner;
        ownerAprove = false;
        subOwnerAprove = false;
    }
 }

 /*위 문제의 또다른 버전입니다. owner가 변경할 때는 바로 변경가능하게 sub-owner가 변경하려고 한다면 owner의 동의가 필요하게 구현하세요.*/
 contract Q57{
    address public owner;
    address sub_owner;
    bool ownerAprove = false;
    
    constructor(address _sub_owner){
        owner = msg.sender;
        sub_owner = _sub_owner;
    }

    function ownerVote() public {
        require(msg.sender == owner);
        ownerAprove = true;
    }

    function changeOwner(address newOwner) public{
        require(msg.sender == owner || ownerAprove == true);
        owner = newOwner;
        ownerAprove = false;
    }
 }

/*A contract에 a,b,c라는 상태변수가 있습니다. a는 A 외부에서는 변화할 수 없게 하고 싶습니다.
b는 상속받은 contract들만 변경시킬 수 있습니다. c는 제한이 없습니다. 각 변수들의 visibility를 설정하세요.*/
contract Q58{
    uint private a;
    uint internal b;
    uint public c;
}

/*현재시간을 받고 2일 후의 시간을 설정하는 함수를 같이 구현하세요.*/
contract Q59{

    function twoDaysLater() public view returns(uint, uint){
    uint currentTime = block.timestamp;
    return (currentTime, currentTime + 2 days);
    }
}

/*방이 2개 밖에 없는 펜션을 여러분이 운영합니다. 각 방마다 한번에 3명 이상 투숙객이 있을 수는 없습니다.
특정 날짜에 특정 방에 누가 투숙했는지 알려주는 자료구조와 그 자료구조로부터 값을 얻어오는 함수를 구현하세요.
예약시스템은 운영하지 않아도 됩니다. 과거의 일만 기록한다고 생각하세요.
힌트 : 날짜는 그냥 숫자로 기입하세요. 예) 2023년 5월 27일 → 230527*/
contract Q60{
    
    // 방에 대한 데이터 구조 정의
    struct Reservation {
        uint256 date;          // 날짜 (예: 230527)
        address[3] guests;    // 최대 3명의 투숙객 주소
        uint8 guestCount;      // 실제 투숙객 수
    }

    // 방 1과 방 2의 예약 정보를 각각 저장
    mapping(uint256 => Reservation) room1Reservations;  // 방 1에 대한 예약
    mapping(uint256 => Reservation) room2Reservations;  // 방 2에 대한 예약
    
    // 예약 추가 함수
    function addReservation(uint256 roomNumber, uint256 date, address guest) public {
        require(roomNumber == 1 || roomNumber == 2, "Invalid room number");
        require(guest != address(0), "Invalid guest address");

        // 예약할 방을 선택
        Reservation storage reservation = roomNumber == 1 ? room1Reservations[date] : room2Reservations[date];

        // 방에 3명까지 투숙 가능하므로, 이미 3명이 투숙 중이면 더 이상 예약할 수 없음
        require(reservation.guestCount < 3, "Room is already fully booked for this date");

        // 새로운 투숙객 추가
        reservation.guests[reservation.guestCount] = guest;
        reservation.guestCount++;
    }

    // 특정 날짜와 방에 대한 투숙객 정보 반환 함수
    function getGuests(uint256 roomNumber, uint256 date) public view returns (address[3] memory) {
        require(roomNumber == 1 || roomNumber == 2, "Invalid room number");

        Reservation memory reservation = roomNumber == 1 ? room1Reservations[date] : room2Reservations[date];

        return reservation.guests;
    }

    // 특정 날짜와 방에 투숙 중인 인원 수 반환
    function getGuestCount(uint256 roomNumber, uint256 date) public view returns (uint8) {
        require(roomNumber == 1 || roomNumber == 2, "Invalid room number");

        Reservation memory reservation = roomNumber == 1 ? room1Reservations[date] : room2Reservations[date];

        return reservation.guestCount;
    }
}




